<?php
/**
 * @file ddclover.module
 *
 * The module file for DD Clover.
 */

//define('DDCLOVER_CLIENT_ID', 'XBV2A5BTAEPDM');
//define('DDCLOVER_CLIENT_SECRET', '7f663c3f-d438-ff62-a636-660199c15a24');

define('DDCLOVER_CLIENT_ID', 'NJASA1B5VA0MP');
define('DDCLOVER_CLIENT_SECRET', '3e32545e-6a10-de95-6219-af52539ab3fc');
define('DDCLOVER_WEBHOOK_AUTH_CODE', '3e6f901e-ae9e-44cb-a222-004a3a4053c5');

include_once 'ddclover.features.inc';

/**
 * Implements hook_ctools_plugin_directory().
 */
function ddclover_ctools_plugin_directory($owner, $plugin_type) {
  if ('ddclover' == $owner) {
    return "plugins/{$type}";
  }
}

/**
 * Implements hook_webhook_processor().
 */
function ddclover_webhook_processor() {
  $path = drupal_get_path('module', 'ddclover') . '/plugins/processor';
  $plugins = array();

  $plugins['cloverlog'] = array(
    'title' => t('Clover Logger'),
    'processor' => array(
      'path' => $path,
      'file' => 'ddclover_Plugins_Processor_Clover.class.inc',
      'class' => 'ddclover_Plugins_Processor_Clover',
    ),
  );

  return $plugins;
}

/**
 * Implements hook_menu().
 */
function ddclover_menu() {
  $items = array();
  
  // Settings form
  //$items['admin/config/services/ddclover'] = array(
  //);
  
  // Landing page for the Web app
  $items['ddclover'] = array(
    'title' => 'Designated Developers Clover Integration',
    'description' => 'Landing page for the DD Clover app',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'ddclover_app_landing',
    'access callback' => TRUE,
  );
  
  // Landing page for merchant authorization
  $items['ddclover/setup'] = array(
    'title' => 'DD Clover App Setup',
    'description' => 'Landing page for the Clover merchant redirects',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ddclover_redirect_landing'),
    'access callback' => 'ddclover_redirect_landing_access',
  );
  
  // Webhook to listen for Clover events
  $items['ddclover/clover-hook'] = array(
    'title' => 'Clover Webhook',
    'description' => 'Webhook callback for receiving data from Clover.',
    'type' => MENU_CALLBACK,
    'page callback' => 'ddclover_webhook_clover',
    'page arguments' => array(),
    'access callback' => 'ddclover_webhook_clover_access',
  );
  
  // Webhook to listen for merchant events
  $items['ddclover/merchant-hook/%ddclover_merchant'] = array(
    'title' => 'Clover Merchant Webhook',
    'description' => 'Webhook callback for receiving requests from merchant sites.',
    'type' => MENU_CALLBACK,
    'page callback' => 'ddclover_webhook_merchant',
    'page arguments' => array(2),
    'access callback' => 'ddclover_webhook_merchant_access',
  );
  
  return $items;
}

/**
 * Callback for the app landing page.
 */
function ddclover_app_landing() {
  $output = array();
  
  $output[] = array(
    '#markup' => '<p>' . t('This is the home of the Designated Developers Web application for Clover.') . '</p>',
  );
  
  return $output;
}

/**
 * Access callback for the Clover merchant redirect.
 */
function ddclover_redirect_landing_access() {
  // TO DO
  return TRUE;
}

/**
 * Page callback for Clover merchant redirects.
 */
function ddclover_redirect_landing($form, &$form_state) {
  if (empty($form)) $form = array();
  
  if (empty($_GET['code']) || empty($_GET['merchant_id']) || empty($_GET['client_id']) || $_GET['client_id'] != DDCLOVER_CLIENT_ID) {
    drupal_goto('ddclover');
  }
  
  $token = !empty($form_state['values']['clover_token']) ? $form_state['values']['clover_token'] : '';
  
  if (!empty($form_state['values']['ddclover'])) {
    $ddclover = $form_state['values']['ddclover'];
  }
  else {
    $ddclover = new ddClover($token);
  }
  
  $form['ddclover'] = array(
    '#type' => 'value',
    '#value' => $ddclover,
  );
  
  $form['merchant_id'] = array(
    '#title' => t('Merchant ID'),
    '#type' => 'textfield',
    '#required' => TRUE,
    '#default_value' => $ddclover->merchant_id,
    //'#disabled' => TRUE,
    '#description' => DRUPAL_ROOT,
  );
  
  $form['employee_id'] = array(
    '#title' => t('Employee ID'),
    '#type' => 'textfield',
    '#required' => FALSE,
    '#default_value' => $ddclover->employee_id,
    //'#disabled' => TRUE,
  );
  
  $form['clover_token'] = array(
    '#title' => t('Access Token'),
    '#type' => 'textfield',
    '#required' => TRUE,
    '#default_value' => $ddclover->access_token,
    //'#disabled' => TRUE,
  );
  
  $form['url'] = array(
    '#title' => t('Your Site URL'),
    '#type' => 'textfield',
    '#required' => TRUE,
  );
  
  $form['user_values'] = array(
    '#type' => 'fieldset',
    '#title' => t('User Account'),
    '#tree' => TRUE,
  );
  
  $form['user_values']['mail'] = array(
    '#type' => 'textfield',
    '#title' => t('Email Address'),
    '#required' => TRUE,
  );
  
  $form['user_values']['pass'] = array(
    '#type' => 'password',
    '#title' => t('Password'),
    '#required' => TRUE,
  );
  
  $form['user_values']['pass2'] = array(
    '#type' => 'password',
    '#title' => t('Confirm Password'),
    '#required' => TRUE,
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'save',
  );
  
  $form['#validate'][] = 'ddclover_redirect_landing_validate';
  $form['#submit'][] = 'ddclover_redirect_landing_submit';
  
  $values = !empty($form_state['values']) ? $form_state['values'] : array('ddclover' => array());
  
  return $form;
}

/**
 * Validation for the redirect landing form.
 */
function ddclover_redirect_landing_validate(&$form, &$form_state) {
  $data = $form_state['values'];
  
  if ($u = user_load_by_mail($data['user_values']['mail'])) {
    form_set_error('user_values][mail', 'That email address is already in use for another account.');
  }
  
  if ($data['user_values']['pass2'] != $data['user_values']['pass']) {
    form_set_error('user_values][pass', 'The passwords you entered do not match.');
  }
}

/**
 * Validation for the redirect landing form.
 */
function ddclover_redirect_landing_submit(&$form, &$form_state) {
  $data = $form_state['values'];
  
  $user_values = array(
    'mail' => $data['user_values']['mail'],
    'pass' => $data['user_values']['pass'],
  );
  
  $ddclover = $data['ddclover'];
  if (empty($ddclover->access_token) && !empty($data['clover_token'])) {
    $ddclover->access_token = $data['clover_token'];
  }
  $ddclover->url = trim($data['url'], '/');
  
  $ddclover->save_merchant();
  $ddclover->save_employee($user_values);
  
  // Send data back to client's WP site to save authorization data
  drupal_goto($ddclover->url . '/twclover?ddcm=' . $ddclover->merchant_id . '&ddcu=' .$ddclover->uid);
}

/**
 * Access callback for the Clover webhook.
 */
function ddclover_webhook_clover_access() {
  // TO DO
  return TRUE;
}

/**
 * Webhook callback for Clover events.
 */
function ddclover_webhook_clover() {
  watchdog('ddclover', 'request method:<pre>!rm</pre>', array('!rm' => print_r($_SERVER['REQUEST_METHOD'], TRUE)));
  if ($_SERVER['REQUEST_METHOD'] == 'GET') {
    watchdog('ddclover', 'get check<pre>!get</pre>', array('!get' => print_r($_GET, TRUE)));
  }
  $received_json = file_get_contents("php://input",  TRUE);
  watchdog('ddclover', 'webhook received check:<pre>' . print_r($received_json, TRUE) . '</pre>');
  $json = drupal_json_decode($received_json, TRUE);
  if (!empty($json)) {
    watchdog('ddclover', 'webhook json check:<pre>' . print_r($json, TRUE) . '</pre>');
  }
}

/**
 * Webhook callback for Clover mercant events.
 */
function ddclover_webhook_merchant($ddclover_merchant, $action) {
  switch ($_POST['module']) {
    case 'merchants': {
      break;
    }
    case 'customers': {
      break;
    }
    case 'employees': {
      break;
    }
    case 'inventory': {
      break;
    }
    case 'notifications': {
      break;
    }
    case 'orders': {
      break;
    }
    case 'payments': {
      break;
    }
    case 'apps': {
      break;
    }
  }
}

/**
 * Access callback for the merchant webhook.
 */
function ddclover_webhook_merchant_access() {
  $p = !emty($_POST) ? $_POST : array();
  
  // Deny access if any of the necessary post data is missing
  if (empty($p['merchant_id']) || empty($p['uid']) || empty($p['mail']) || empty($p['module']) || empty($p['operation'])) return FALSE;
  
  // Deny access if the user email address does not match what was posted
  $u = user_load($p['uid']);
  if (empty($u->mail) || $u->mail != $p['mail']) return FALSE;
  
  $query =
    'SELECT ddcm.`merchant_id` AS `merchant_id` ' .
    'FROM {ddclover_merchant} ddcm ' .
      'INNER JOIN {ddclover_employee} ddce ' .
        'ON ddcm.`merchant_id` = ddce.`merchant_id` ' .
    'WHERE ddce.`uid` = :uid';
  $merchant_id = db_query($query, array(':uid' => $p['uid']));
  
  // Deny access if the user is not tied to a merchant ID
  if (empty($merchant_id) || $merchant_id != $p['merchant_id']) return FALSE;
  
  // Everything checks out.
  return TRUE;
}

/**
 * Loader function for clover merchant objects.
 */
function ddclover_merchant_load($ddclover_merchant_id) {
  $output = new ddClover();
  $output->load_merchant($ddclover_merchant_id);
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function ddclover_form_ctools_export_ui_edit_item_form_alter(&$form, &$form_state) {
  if (isset($form['whid']) && empty($form['whid']['#value'])) {
    $form['#validate'][] = 'ddclover_ctools_export_ui_edit_item_validate';
  }
}

/**
 * Custom validation for the ctools export ui edit form.
 */
function ddclover_ctools_export_ui_edit_item_validate(&$form, &$form_state) {
  $errors = form_get_errors();
  if (!empty($errors)) return;
  
  $data = $form_state['values'];
  if (empty($data['whid']) && empty($form_state['item'])) {
    $webhook = webhook_load($data['machine_name']);
    if (empty($webhook)) {
      $whid = db_insert('webhook')
      ->fields(array(
        'title' => $data['title'],
        'machine_name' => $data['machine_name'],
        'description' => $data['description'],
        'unserializer' => $data['unserializer'],
        'processor' => $data['processor'],
        'enabled' => $data['enabled'],
      ))
      ->execute();
      
    }
    else {
      $whid = $webhook->whid;
    }
    
    $form_state['values']['whid'] = $whid;
  }
}