<?php
/**
 * @file ddclover.module
 *
 * The module file for DD Clover.
 */

//define('DDCLOVER_CLIENT_ID', 'XBV2A5BTAEPDM');
//define('DDCLOVER_CLIENT_SECRET', '7f663c3f-d438-ff62-a636-660199c15a24');

define('DDCLOVER_CLIENT_ID', 'NJASA1B5VA0MP');
define('DDCLOVER_CLIENT_SECRET', '3e32545e-6a10-de95-6219-af52539ab3fc');

/**
 * Implements hook_menu().
 */
function ddclover_menu() {
  $items = array();
  
  // Settings form
  //$items['admin/config/services/ddclover'] = array(
  //);
  
  // Landing page for the Web app
  $items['ddclover'] = array(
    'title' => 'Designated Developers Clover App',
    'description' => 'Landing page for the DD Clover app',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'ddclover_app_landing',
    'access callback' => TRUE,
  );
  
  // Landing page for merchant authorization
  $items['ddclover/setup'] = array(
    'title' => 'DD Clover App Setup',
    'description' => 'Landing page for the Clover merchant redirects',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ddclover_redirect_landing'),
    'access callback' => 'ddclover_redirect_landing_access',
  );
  
  // Webhook to listen for Clover events
  $items['ddclover/clover-hook'] = array(
    'title' => 'Clover Webhook',
    'description' => 'Webhook callback for receiving data from Clover.',
    'type' => MENU_CALLBACK,
    'page callback' => 'ddclover_webhook_clover',
    'page arguments' => array(),
    'access callback' => 'ddclover_webhook_clover_access',
  );
  
  // Webhook to listen for merchant events
  $items['ddclover/%ddclover_merchant/%'] = array(
    'title' => 'Clover Merchant Webhook',
    'description' => 'Webhook callback for receiving requests from merchant sites.',
    'type' => MENU_CALLBACK,
    'page callback' => 'ddclover_webhook_merchant',
    'page arguments' => array(1,2),
    'access callback' => 'ddclover_webhook_merchant_access',
  );
  
  return $items;
}

/**
 * Callback for the app landing page.
 */
function ddclover_app_landing() {
  $output = array();
  
  $output[] = array(
    '#markup' => '<p>' . t('This is the home of the Designated Developers Web application for Clover.') . '</p>',
  );
  
  return $output;
}

/**
 * Access callback for the Clover merchant redirect.
 */
function ddclover_redirect_landing_access() {
  // TO DO
  return TRUE;
}

/**
 * Page callback for Clover merchant redirects.
 */
function ddclover_redirect_landing($form, &$form_state) {
  if (empty($form)) $form = array();
  
  if (empty($_GET['code']) || empty($_GET['merchant_id']) || empty($_GET['client_id']) || $_GET['client_id'] != DDCLOVER_CLIENT_ID) {
    drupal_goto('ddclover');
  }
  
  $token = !empty($form_state['values']['clover_token']) ? $form_state['values']['clover_token'] : '';
  
  if (!empty($form_state['values']['ddclover'])) {
    $ddclover = $form_state['values']['ddclover'];
  }
  else {
    $ddclover = new ddClover($token);
  }
  
  $form['ddclover'] = array(
    '#type' => 'value',
    '#value' => $ddclover,
  );
  
  $form['merchant_id'] = array(
    '#title' => t('Merchant ID'),
    '#type' => 'textfield',
    '#required' => TRUE,
    '#default_value' => $ddclover->merchant_id,
    //'#disabled' => TRUE,
  );
  
  $form['employee_id'] = array(
    '#title' => t('Employee ID'),
    '#type' => 'textfield',
    '#required' => FALSE,
    '#default_value' => $ddclover->employee_id,
    //'#disabled' => TRUE,
  );
  
  $form['clover_token'] = array(
    '#title' => t('Access Token'),
    '#type' => 'textfield',
    '#required' => TRUE,
    '#default_value' => $ddclover->access_token,
    //'#disabled' => TRUE,
  );
  
  $form['url'] = array(
    '#title' => t('Your Site URL'),
    '#type' => 'textfield',
    '#required' => TRUE,
  );
  
  $form['user_values'] = array(
    '#type' => 'fieldset',
    '#title' => t('User Account'),
    '#tree' => TRUE,
  );
  
  $form['user_values']['mail'] = array(
    '#type' => 'textfield',
    '#title' => t('Email Address'),
    '#required' => TRUE,
  );
  
  $form['user_values']['pass'] = array(
    '#type' => 'password',
    '#title' => t('Password'),
    '#required' => TRUE,
  );
  
  $form['user_values']['pass2'] = array(
    '#type' => 'password',
    '#title' => t('Confirm Password'),
    '#required' => TRUE,
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'save',
  );
  
  $form['#validate'][] = 'ddclover_redirect_landing_validate';
  $form['#submit'][] = 'ddclover_redirect_landing_submit';
  
  $values = !empty($form_state['values']) ? $form_state['values'] : array('ddclover' => array());
  
  return $form;
}

/**
 * Validation for the redirect landing form.
 */
function ddclover_redirect_landing_validate(&$form, &$form_state) {
  $data = $form_state['values'];
  
  if ($u = user_load_by_mail($data['user_values']['mail'])) {
    form_set_error('user_values][mail', 'That email address is already in use for another account.');
  }
  
  if ($data['user_values']['pass2'] != $data['user_values']['pass']) {
    form_set_error('user_values][pass', 'The passwords you entered do not match.');
  }
}

/**
 * Validation for the redirect landing form.
 */
function ddclover_redirect_landing_submit(&$form, &$form_state) {
  $data = $form_state['values'];
  
  $user_values = array(
    'mail' => $data['user_values']['mail'],
    'pass' => $data['user_values']['pass'],
  );
  
  $ddclover = $data['ddclover'];
  if (empty($ddclover->access_token) && !empty($data['clover_token'])) {
    $ddclover->access_token = $data['clover_token'];
  }
  $ddclover->url = trim($data['url'], '/');
  
  $ddclover->save_merchant();
  $ddclover->save_employee($user_values);
  
  // Send data back to client's WP site to save authorization data
  drupal_goto($ddclover->url . '/twclover?ddcm=' . $ddclover->merchant_id . '&ddcu=' .$ddclover->uid);
}

/**
 * Access callback for the Clover webhook.
 */
function ddclover_webhook_clover_access() {
  // TO DO
  return TRUE;
}

/**
 * Webhook callback for Clover events.
 */
function ddclover_webhook_clover() {
  // TO DO
}

/**
 * Webhook callback for Clover mercant events.
 */
function ddclover_webhook_merchant($ddclover_merchant, $action) {
  if (empty($_POST) || empty($_POST['merchant_id'] || empty($_POST['uid']))) return;
  
  $merchant_id = $_GET['ddclover_merchant_id'];
  $uid = $_GET['ddclover_uid'];
  
  $count = db_query('COUNT(*) FROM {ddclover_employee} WHERE `uid` = :uid AND `merchant_id` = :merchant_id', array(
    ':uid' => $_POST['uid'],
    ':merchant_id' => $_POST['merchant_id']
  ))
  ->fetchField();
  
  if (empty($count)) return;
  
  $ddclover = new ddClover();
  $ddclover->load_merchant($_POST['merchant_id']);
  
  
}

/**
 * Access callback for the merchant webhook.
 */
function ddclover_webhook_merchant_access() {
  // TO DO
  return TRUE;
}

/**
 * Loader function for clover merchant objects.
 */
function ddclover_merchant_load($ddclover_merchant_id) {
  
}
